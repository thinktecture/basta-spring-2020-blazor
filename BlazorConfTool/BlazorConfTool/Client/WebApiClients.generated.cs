//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlazorConfTool.Server.Controllers.Client
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	
	
	public partial class Conferences
	{
		
		private System.Net.Http.HttpClient client;
		
		private System.Uri baseUri;
		
		public Conferences(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (baseUri == null)
				throw new ArgumentNullException("Null baseUri", "baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}
		
		/// <summary>
		/// GET api/Conferences
		/// </summary>
		public async Task<BlazorConfTool.Shared.DTO.ConferenceOverview[]> GetAsync()
		{
			var requestUri = new Uri(this.baseUri, "api/Conferences");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BlazorConfTool.Shared.DTO.ConferenceOverview[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET api/Conferences/{id}
		/// </summary>
		public async Task<BlazorConfTool.Shared.DTO.ConferenceDetails> GetAsync(string id)
		{
			var requestUri = new Uri(this.baseUri, "api/Conferences/"+Uri.EscapeDataString(id));
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BlazorConfTool.Shared.DTO.ConferenceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// POST api/Conferences
		/// </summary>
		public async Task<BlazorConfTool.Shared.DTO.ConferenceDetails> PostConferenceAsync(BlazorConfTool.Shared.DTO.ConferenceDetails conference)
		{
			var requestUri = new Uri(this.baseUri, "api/Conferences");
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create();
			requestSerializer.Serialize(requestWriter, conference);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			var responseMessage = await client.PostAsync(requestUri, content);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BlazorConfTool.Shared.DTO.ConferenceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public partial class Countries
	{
		
		private System.Net.Http.HttpClient client;
		
		private System.Uri baseUri;
		
		public Countries(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (baseUri == null)
				throw new ArgumentNullException("Null baseUri", "baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}
		
		/// <summary>
		/// GET api/Countries
		/// </summary>
		public async Task<string[]> GetAsync()
		{
			var requestUri = new Uri(this.baseUri, "api/Countries");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public partial class Statistics
	{
		
		private System.Net.Http.HttpClient client;
		
		private System.Uri baseUri;
		
		public Statistics(System.Net.Http.HttpClient client, System.Uri baseUri)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (baseUri == null)
				throw new ArgumentNullException("Null baseUri", "baseUri");

			this.client = client;
			this.baseUri = baseUri;
		}
		
		/// <summary>
		/// GET api/Statistics/distribution
		/// </summary>
		public async Task<Newtonsoft.Json.Linq.JObject> GetDistributionAsync()
		{
			var requestUri = new Uri(this.baseUri, "api/Statistics/distribution");
			var responseMessage = await client.GetAsync(requestUri);
			try
			{
				responseMessage.EnsureSuccessStatusCode();
				return responseMessage;
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}
